name: Build Linux x86-64

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    #build and install XP-CMake
    - name: Checkout XP-CMake repo
      uses: actions/checkout@v4
      with:
        repository: aczwink/XP-CMake
        path: xpcmake

    - name: Create build directory for XP-CMake
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B ${{github.workspace}}/xpcmake/_build -S ${{github.workspace}}/xpcmake

    - name: Build XP-CMake
      run: cmake --build ${{github.workspace}}/xpcmake/_build --config ${{env.BUILD_TYPE}}

    - name: Install XP-CMake
      run: sudo make install
      working-directory: ${{github.workspace}}/xpcmake/_build


    #build and install Std++
    - name: Checkout Std++ repo
      uses: actions/checkout@v4
      with:
        repository: aczwink/StdPlusPlus
        path: stdpp

    - name: Create build directory for Std++
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B ${{github.workspace}}/stdpp/_build -S ${{github.workspace}}/stdpp

    - name: Build Std++
      run: cmake --build ${{github.workspace}}/stdpp/_build --config ${{env.BUILD_TYPE}}

    - name: Install Std++
      run: sudo make install
      working-directory: ${{github.workspace}}/stdpp/_build



    #build and install ArmA-Modding-Tools
    - name: Checkout ArmA-Modding-Tools repo
      uses: actions/checkout@v4
      with:
        path: arma

    - name: Configure build directory for ArmA-Modding-Tools
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B ${{github.workspace}}/arma/_build -S ${{github.workspace}}/arma

    - name: Build ArmA-Modding-Tools
      run: cmake --build ${{github.workspace}}/arma/_build --config ${{env.BUILD_TYPE}}

    # Create release
    - name: Pack release archive
      run: zip --junk-paths bin_linux_x86-64.zip arma/_build/liblibBISMod_d.so arma/_build/tools/p3dEdit/p3dEdit arma/_build/tools/paaEdit/paaEdit arma/_build/tools/raPEdit/raPEdit arma/_build/tools/wrpEdit/wrpEdit

    - name: Create or update release
      env:
        GH_TOKEN: ${{ github.token }}
        GHR_TITLE: Latest build
        GHR_NOTES: Latest build of master branch
        GHR_FILENAME: ../bin_linux_x86-64.zip
      run: |
        if gh release view latest; then
          gh release edit latest --title "$GHR_TITLE" --notes "$GHR_NOTES"
        else
          gh release create latest --title "$GHR_TITLE" --notes "$GHR_NOTES"
        fi
        gh release upload latest "$GHR_FILENAME" --clobber
      working-directory: arma
