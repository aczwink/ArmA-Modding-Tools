#pragma once
//SJCLib
#include <SJCLib.h>
//Local
#include "Definitions.h"

namespace BISLibrary
{
	enum CharClass
	{
		CC_ILLEGAL,
		CC_NULLBYTE,
		CC_TABSPACE,
		CC_LINEFEED,
		CC_CARRIAGERETURN,
		CC_NEGATION,
		CC_INVERTEDCOMMA,
		CC_AND,
		CC_BRACKETOPEN,
		CC_BRACKETCLOSE,
		CC_MULTIPLY,
		CC_PLUS,
		CC_COMMA,
		CC_DOT,
		CC_SLASH,
		CC_NUMBER,
		CC_SEMICOLON,
		CC_SMALLERTHAN,
		CC_ASSIGNMENT,
		CC_GREATERTHAN,
		CC_SQUAREDBRACKETOPEN,
		CC_BACKSLASH,
		CC_SQUAREDBRACKETCLOSE,
		CC_UNDERSCORE,
		CC_LETTER,
		CC_BRACEOPEN,
		CC_BRACECLOSE,
		CC_INVALID,
	};
	
	enum SQFTokenState
	{
		SQF_STATE_ILLEGAL,
		SQF_STATE_INVALID,
		SQF_STATE_START,
		SQF_STATE_FINISHED,
		SQF_STATE_END,
		SQF_STATE_TABSPACE,
		SQF_STATE_LINEFEED,
		SQF_STATE_CARRIAGERETURN,
		SQF_STATE_NEGATION,
		SQF_STATE_UNCLOSEDLITERAL,
		SQF_STATE_LITERAL,
		SQF_STATE_AND,
		SQF_STATE_LOGICALAND,
		SQF_STATE_BRACKETOPEN,
		SQF_STATE_BRACKETCLOSE,
		SQF_STATE_MULTIPLY,
		SQF_STATE_PLUS,
		SQF_STATE_COMMA,
		SQF_STATE_SLASH,
		SQF_STATE_SINGLELINECOMMENT,
		SQF_STATE_MULTILINECOMMENT,
		SQF_STATE_NUMBER,
		SQF_STATE_UNFINISHEDFLOAT,
		SQF_STATE_FLOAT,
		SQF_STATE_SEMICOLON,
		SQF_STATE_ASSIGNMENT,
		SQF_STATE_EQUALS,
		SQF_STATE_NOTEQUALS,
		SQF_STATE_LESSTHAN,
		SQF_STATE_GREATERTHAN,
		SQF_STATE_SQUAREDBRACKETOPEN,
		SQF_STATE_SQUAREDBRACKETCLOSE,
		SQF_STATE_UNDERSCORE,
		SQF_STATE_PRIVATEVARIABLE,
		SQF_STATE_LETTER,
		SQF_STATE_BRACEOPEN,
		SQF_STATE_BRACECLOSE,
	};
	
	enum SQFToken
	{
		SQF_TOKEN_ILLEGAL,
		SQF_TOKEN_INVALID,
		SQF_TOKEN_END,
		SQF_TOKEN_TABSPACE,
		SQF_TOKEN_CARRIAGERETURN,
		SQF_TOKEN_LINEFEED,
		SQF_TOKEN_NEGATION,
		SQF_TOKEN_LITERAL,
		SQF_TOKEN_LOGICALAND,
		SQF_TOKEN_BRACKETOPEN,
		SQF_TOKEN_BRACKETCLOSE,
		SQF_TOKEN_MULTIPLY,
		SQF_TOKEN_PLUS,
		SQF_TOKEN_SINGLELINECOMMENT,
		SQF_TOKEN_MULTILINECOMMENT,
		SQF_TOKEN_COMMA,
		SQF_TOKEN_NUMBER,
		SQF_TOKEN_FLOAT,
		SQF_TOKEN_SEMICOLON,
		SQF_TOKEN_ASSIGNMENT,
		SQF_TOKEN_EQUALS,
		SQF_TOKEN_NOTEQUALS,
		SQF_TOKEN_LESSTHAN,
		SQF_TOKEN_GREATERTHAN,
		SQF_TOKEN_PRIVATEVARIABLE,
		SQF_TOKEN_IDENTIFIER,
		SQF_TOKEN_SQUAREDBRACKETOPEN,
		SQF_TOKEN_SQUAREDBRACKETCLOSE,
		SQF_TOKEN_BRACEOPEN,
		SQF_TOKEN_BRACECLOSE,
	};
	
	class SJCBISLIB_API CSQFLexer
	{
	private:
		//Variables
		SJCLib::CString tokenValue;
		const char *pSourceStart;
		char *pSource;
		//Functions
		CharClass EvaluateChar(char c);
		SQFToken GetTokenType(SQFTokenState state);
		SQFTokenState NextState(SQFTokenState state, CharClass c);
	public:
		//Constructor
		CSQFLexer();
		//Destructor
		~CSQFLexer();
		//Functions
		SJCLib::CString GetCurrentTokenValue();
		void Init(const char *pSource);
		uint32 GetCurrentOffset();
		SQFToken GetNextToken(bool ignore = true);
	};
}